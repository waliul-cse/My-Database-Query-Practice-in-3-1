create table t1(e integer, f integer);

DELETE FROM t1;
INSERT INTO t1 VALUES(1, 3);
INSERT INTO t1 VALUES(2, 4);



//pl1
DECLARE
    a NUMBER;
    b NUMBER;
BEGIN
    SELECT e,f INTO a,b FROM t1 WHERE e>1;
    INSERT INTO t1 VALUES(b,a);
END;
.
run;





//pl2
DECLARE
    a NUMBER;
    b NUMBER;
BEGIN
    SELECT e,f INTO a,b FROM t1 WHERE e>1;
    IF b=1 THEN
        INSERT INTO t1 VALUES(b,a);
    ELSE
        INSERT INTO t1 VALUES(b+10,a+10);
    END IF;
END;
.
run;




//pl3
DECLARE
    i NUMBER := 1;
BEGIN
    LOOP
        INSERT INTO T1 VALUES(i,i);
        i := i+1;
        EXIT WHEN i>100;
    END LOOP;
END;
.
run;



//pl4
 DECLARE
       /* Output variables to hold the result of the query: */
      a T1.e%TYPE;
      b T1.f%TYPE;
        /* Cursor declaration: */
      CURSOR T1Cursor IS
          SELECT e, f
          FROM T1
          WHERE e < f;
 BEGIN
     OPEN T1Cursor;
     LOOP
            /* Retrieve each row of the result of the above query into PL/SQL variables: */
         FETCH T1Cursor INTO a, b;
            /* If there are no more rows to fetch, exit the loop: */
         EXIT WHEN T1Cursor%NOTFOUND;
            /* Insert the reverse tuple: */
         INSERT INTO T1 VALUES(b, a);
     END LOOP;
        /* Free cursor used by the query. */
     CLOSE T1Cursor;
 END;
 .
 run;




//pl5
//Procedures
CREATE TABLE T2 (
    a INTEGER,
    b CHAR(10)
);


CREATE PROCEDURE addtuple1(i IN NUMBER) AS
	/* IN is a mode(read), OUT is mode(write), INOUT is mode (readwrite)*/
BEGIN
    INSERT INTO T2 VALUES(i, 'yyy');
END addtuple1;
.
run;



//to run the procedure
BEGIN addtuple1(99); END;
.
run;





