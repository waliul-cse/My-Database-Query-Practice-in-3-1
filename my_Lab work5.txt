
 Create Table advanced
 (Id  varchar(15),
 Name varchar(20),
 Dept  varchar(15),
 Cgpa  float,
 Birth_date date,
 Mob_no  int,
 Dist varchar(20),
 Salary  number(8));

_______________________insert_________________________________________________
insert into advanced values('CE101','Hasan','CSE',3.42,'12-JAN-2012',822,'DHA',30000);
insert into advanced values('CE102','Habib','ICT',3.82,'14-JAN-2012',522,'CTG',40000);

insert into advanced values('CE103','Abir','BGE',3.32,'13-JAN-2013',522,'BAR',30000);

insert into advanced values('CE104','mila','BBA',3.48,'12-JAN-2012',342,'KHUL',70000);

insert into advanced values('CE106','Nipa','BBA',3.60,'12-JAN-2010',332,'Tangail',80000);

insert into advanced values('CE107','Nishan','EEE',3.62,'12-JAN-2009',222,'Naogaon',10000);

insert into advanced values('CE108','Abul','IT',3.90,'12-JAN-2006',0155323132,'CTG',90000);

_______________________________View Creation________________________________________-_________-

Syntax:
          CREATE or replace view "VIEW_NAME" AS "SQL Statement"

Note:"SQL Statement" can be any of the SQL statements


Create View advanced_data as
(
select name,dept,dist,salary from advanced
);
 Note:IN simple query  bracket is optional but in complex query it is needed.


SQL> select*from advanced_data;

NAME                 DEPT            DIST                     SALARY
-------------------- --------------- -------------------- ----------
Hasan                CSE             DHA                       30000
Habib                ICT             CTG                       40000
Abir                 BGE             BAR                       30000
mila                 BBA             KHUL                      70000
Nipa                 BBA             Tangail                   80000
Nishan               EEE             Naogaon                   10000
Abul                 IT              CTG                       90000


__________________________________________insert into view____________________________________________--

insert into advanced_data values('CE1020','ECE','NAO',30000);





__________________________________________________view create with joining___________________________
   Create Table personal
   (ID  varchar(15),
   F_name varchar(15),
   Name  varchar(14),
   Balance number(8));
 insert into personal values('CE101','Abdur Rahim','Hasan',20000);
 insert into personal values('CE102','Abdur Halim','Habib',40000);
 insert into personal values('CE105','Abu Rahim','Abir',60000);
 insert into personal values('CE104','Abu bakkar','Mila',70000);


 
 SQL>> Create or replace view  ap as  select advanced.id,advanced.name,advanced.dept,advanced.salary,personal.balance
 from advanced 
inner join personal on advanced.id=personal.id;

View created.

SQL> select*from ap;

ID              NAME                 DEPT                SALARY    BALANCE
--------------- -------------------- --------------- ---------- ----------
CE101           Hasan                CSE                  30000      20000
CE102           Habib                ICT                  40000      40000
CE104           mila                 BBA                  70000      70000
ID              NAME                 DEPT                SALARY    BALANCE




_____________________- _______________procedure create_______________________________________________________
create or replace procedure my_proc as
    begin
      null;
    end my_proc;
    /

Procedure created.

_________________________________replace a procedure_______________________

create or replace procedure my_proc as
    begin
      dbms_output.put_line ( 'Hello World' );
    end my_proc;
    /


SQL>  EXEC my_proc();

PL/SQL procedure successfully completed.



 ______________________________________Simple Stored Procedure example__________________________________-

Create Table karap_student
(CGPA float
);



SQL> Create OR Replace  procedure insert_bad(para_m IN number) is
 2  begin
 3  insert into karap_student values(para_m);
 4  end;
 5  /

Procedure created.

SQL> exec insert_bad(2.81);

PL/SQL procedure successfully completed.


SQL> select*from karap_student;

      CGPA
----------
      2.81


-----__________________________________________Trigger Create_________________________________________________
  Create or replace trigger advance_info 
    before insert or update or delete on advanced
    begin
    null;
   end;
   /


Trigger Created


____________________________________________________-Trigger_________________________________________________________-
Create table advanced_copy as select  from advanced;


_____________________________________________________--My trigger table_____________________________----
create table my_log(
     who varchar2(30),
     when date );

________________________________________________________---Trigger create____________________-
Create or Replace trigger advance_info
before insert or update or delete on advanced_copy
begin
insert into my_log(who,when)values(user,sysdate);
end;
/

____________________________________update the existing trigger__________________________--
update advanced_copy set salary = salary  1.1;


____________----select to show trigger___________________

SQL select*from my_log;

WHO                            WHEN
------------------------------ ---------
SYSTEM                         10-MAY-13


_________________________delete command____________________________-
SQL delete *from advanced_copy;

7 rows deleted.

SQL select *from my_log;

WHO                            WHEN
------------------------------ ---------
SYSTEM                         10-MAY-13
SYSTEM                         10-MAY-13



CREATE TABLE DEPT(
       DEPTNO NUMBER(2),
       DNAME VARCHAR2(14),
       LOC VARCHAR2(13)
   );


__________________________________--Trigger create___________________-
create or replace trigger deptbs before insert or update or delete
       on dept
       begin
          dbms_output.put_line('before statement (dept)');
       end;
    /


______________________________________Account_transaction Table_______________________________________________________
CREATE TABLE account_transaction
 (transaction_id int,
 account_id int,
 Transaction_type VARCHAR2(13),
 Transaction_amount NUMBER,
 Comments VARCHAR2(30));

-------------------------------------------Account_transaction Table Trigger_____________________________________________
CREATE OR REPLACE TRIGGER validate_update
 BEFORE UPDATE ON account_transaction
 FOR EACH ROW
 BEGIN
 IF UPDATING('ACCOUNT_ID') THEN
 DBMS_OUTPUT.put_line ('ERROR');
 END IF;
END;
/